{"version":3,"sources":["components/header/header.jsx","components/cards/Hyperlink/hyperlink.jsx","components/cards/Search/search.jsx","App/App.js","serviceWorker.js","index.js"],"names":["Hamburger","props","hamburgerStyle","active","role","className","aria-label","aria-expanded","data-target","href","onClick","clickHandler","aria-hidden","NavBarStart","loggedIn","userLoggedIn","NavBarEnd","loggedOut","onSignUpClick","onLogInClick","onLogOutClick","Header","handleHamburgerClick","setState","hamburgerActive","state","handleSignUpClick","signUpHandler","handleLogInClick","logInHandler","handleLogOutClick","logOutHandler","this","id","React","Component","Hyperlink","url","title","CardTitle","prefix","Search","handleSearchClick","sanitizedPrefix","replace","sanitizedKeywords","keywords","fullUrl","window","location","handleKeywordsUpdate","event","currentTarget","value","handleReturnKeyPressed","charCode","htmlFor","onChange","onKeyPress","portaType","PortaCards","portaCards","portas","map","porta","type","console","log","portaAddButton","columnWidth","gutterWidth","gutterHeight","App","handleUserLogIn","handleUserLogOut","handleUserSignUp","user","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.a18bba5c.chunk.js","sourcesContent":["import React from 'react';\n\nimport './header.sass';\n\n\nfunction Hamburger(props) {\n  let hamburgerStyle = (props.active) ? 'navbar-burger burger is-active' : 'navbar-burger burger';\n  return(\n    <a role=\"button\" className={hamburgerStyle} aria-label=\"menu\" aria-expanded=\"false\" data-target=\"navbarBasicExample\" href=\"#burger\" onClick={props.clickHandler}>\n      <span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>\n      <span aria-hidden=\"true\"></span>\n    </a>\n  );\n}\n\nfunction NavBarStart(props) {\n  \n  const loggedOut = '';\n  \n  const loggedIn = <div className=\"navbar-start\">\n    <a className=\"navbar-item\" href=\"#documentation\">documentation</a>\n    <div className=\"navbar-item has-dropdown is-hoverable\">\n      <a className=\"navbar-link\" href=\"#more\"><i className=\"fas fa-user\"></i></a>\n      <div className=\"navbar-dropdown\">\n        <a className=\"navbar-item\" href=\"#more-about\">Profile</a>\n        <a className=\"navbar-item\" href=\"#more-jobs\">Settings</a>\n        <a className=\"navbar-item\" href=\"#more-contact\">Keys</a>\n        <hr className=\"navbar-divider\" />\n        <a className=\"navbar-item\" href=\"#more-report-issue\">Report an issue</a>\n      </div>\n    </div>\n  </div>\n  \n  return(\n    <div className=\"navbar-start\">\n      {(props.userLoggedIn) ? loggedIn : loggedOut }\n    </div>\n  )\n  \n}\n\nfunction NavBarEnd(props) {\n  \n  const loggedOut = <div className=\"navbar-item\">\n    <div className=\"buttons\">\n      <div className=\"button is-info is-small\" onClick={props.onSignUpClick}><strong>Sign up</strong></div>\n      <div className=\"button is-light is-small is-outlined\" onClick={props.onLogInClick}>Log in</div>\n    </div>\n  </div>\n  \n  const loggedIn = <div className=\"navbar-item\">\n    <div className=\"buttons\">\n      <div className=\"button is-light is-small is-outlined\" onClick={props.onLogOutClick}>Log out</div>\n    </div>\n  </div>\n  \n  return(\n    <div className=\"navbar-end\">\n      {(props.userLoggedIn) ? loggedIn : loggedOut }\n    </div>\n  );\n  \n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nclass Header extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      hamburgerActive: false,\n      userLoggedIn: props.userLoggedIn,\n    };  \n  }\n\n\n  // HANDLERS /////////////////////////////////////////////////////////////////\n  \n  handleHamburgerClick = () => {\n    this.setState({ hamburgerActive: !this.state.hamburgerActive });\n  };\n  \n  handleSignUpClick = () => {\n    this.props.signUpHandler(true);\n  };\n  \n  handleLogInClick = () => {\n    this.setState({ userLoggedIn: true });\n    this.props.logInHandler(true);\n  };\n  \n  handleLogOutClick = () => {\n    this.setState({ userLoggedIn: false });\n    this.props.logOutHandler(false);\n  };\n  \n  /////////////////////////////////////////////////////////////////////////////\n    \n  \n  render() {\n    \n    return(\n      \n      <nav className=\"navbar\" role=\"navigation\" aria-label=\"main navigation\">\n\n        <div className=\"navbar-brand\">\n          <a className=\"navbar-item\" href=\"/\">\n            <h1 className=\"title is-4\">PORTA</h1>\n          </a>\n          <Hamburger active={this.state.hamburgerActive} clickHandler={this.handleHamburgerClick} />\n        </div>\n\n        <hr className=\"navbar-divider\" />\n\n        <div id=\"main-menu\" className={`navbar-menu ${(this.state.hamburgerActive) ? 'is-active' : ''}`}>\n\n          <NavBarStart\n            userLoggedIn={this.state.userLoggedIn}\n          />\n\n          <NavBarEnd \n            userLoggedIn={this.state.userLoggedIn} \n            onSignUpClick={this.handleSignUpClick} \n            onLogInClick={this.handleLogInClick} \n            onLogOutClick={this.handleLogOutClick}\n          />\n\n        </div>\n\n      </nav>\n      \n    );\n    \n  }\n  \n}\n\nexport default Header;","import React from 'react';\n\nimport './hyperlink.sass';\n\nclass Hyperlink extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      url: props.url,\n      title: props.title\n    };\n  }\n  \n  render() {  \n    return(\n      \n      <div className=\"card\">\n\n        <header className=\"card-header\">\n          <p className=\"card-header-title\">\n            Link: {this.state.title}\n          </p>\n        </header>\n        \n        <div className=\"card-content\">\n          <div className=\"content\">\n            {this.state.url}\n          </div>\n        </div>\n\n        <footer className=\"card-footer\">\n          <a href={this.state.url} className=\"card-footer-item\">{`Visit ${this.state.title}`}</a>\n        </footer>\n\n      </div>\n\n    );\n    \n  }\n}\n\nexport default Hyperlink;\n","import React from 'react';\n\nimport './search.sass';\n\n\nfunction CardTitle(props) {\n  \n  let output = '';\n  \n  if (props.prefix === '') {\n    output = <p className=\"card-header-title\">Search: {props.title}</p>\n  } else {\n    output = <p className=\"card-header-title\">{props.title} » {props.prefix}</p>\n  }\n  return output;\n}\n\n\nclass Search extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      url: props.url,\n      title: props.title,\n      prefix: props.prefix || '',\n      keywords: ''\n    };  \n  }\n  \n  handleSearchClick = () => {\n    const sanitizedPrefix = (this.state.prefix !== '') ? this.state.prefix.replace(/\\s/g, '+') + '+' : '';\n    const sanitizedKeywords = this.state.keywords.replace(/\\s/g, '+');\n    const fullUrl = `${this.state.url}${sanitizedPrefix}${sanitizedKeywords}`;\n    window.location.href = fullUrl;\n  };\n  \n  handleKeywordsUpdate = (event) => {\n    this.setState({\n      keywords: event.currentTarget.value\n    });\n  }\n  \n  handleReturnKeyPressed = (event) => {  \n    if (event.charCode === 13) {\n      this.handleSearchClick();\n    }\n  }\n  \n  render() {\n    \n    return(\n      \n      <div className=\"card\">\n\n        <header className=\"card-header\">\n          <CardTitle title={this.state.title} prefix={this.state.prefix} />\n        </header>\n\n        <div className=\"card-content\">\n          <div className=\"content\">\n\n            <label htmlFor={`search_${this.state.title}`}>Keywords:</label>\n            <input id={`search_${this.state.title}`} value={this.state.keywords} onChange={this.handleKeywordsUpdate} onKeyPress={this.handleReturnKeyPressed} />\n\n          </div>\n        </div>\n\n        <footer className=\"card-footer\">\n          <a href={`#search_button_${this.state.title}`} className=\"card-footer-item\" onClick={this.handleSearchClick}>{`Search ${this.state.title}`}</a>\n        </footer>\n\n      </div>\n      \n    );\n    \n  }\n  \n  \n  \n  \n}\n\nexport default Search;","import React from 'react';\nimport StackGrid from 'react-stack-grid';\n\nimport '@fortawesome/fontawesome-free/css/all.min.css'\nimport './App.sass';\n\nimport { Header } from '../components';\nimport { \n  Hyperlink,\n  Search\n} from '../components/cards';\n\n///////////////////////////////////////////////////////////////////////////////\n\nconst portaType = {\n  hyperlink: 'hyperlink',\n  search: 'search'\n};\n\n///////////////////////////////////////////////////////////////////////////////\n\nfunction PortaCards(props)\n{\n  let portaCards = props.portas.map((porta) => {\n    if (porta.type === portaType.hyperlink) {\n        return <Hyperlink url={porta.url} title={porta.title} />\n      } else if (porta.type === portaType.search) {\n        return <Search url={porta.url} prefix={porta.prefix || ''} title={porta.title} />\n      }\n  });\n  \n  console.log(props.userLoggedIn)\n  \n  let portaAddButton = (props.userLoggedIn === false) ? '' : <button className=\"button is-large\">\n    <span className=\"icon is-large\">\n      <i className=\"fas fa-plus\"></i>\n    </span>\n  </button>\n  \n  return <StackGrid columnWidth={350} gutterWidth={20} gutterHeight={20}>\n    {portaCards}\n\n    {portaAddButton}\n\n  </StackGrid>;\n}\n\n///////////////////////////////////////////////////////////////////////////////\n\nclass App extends React.Component {\n  \n  constructor(props) {\n    super(props);\n    this.state = {\n      userLoggedIn: false,\n      user: {},\n      portas: [\n        {\n          type: portaType.hyperlink,\n          url: \"https://news.ycombinator.com\",\n          title: \"Hacker News\"\n        },\n        {\n          type: portaType.search,\n          url: \"https://hn.algolia.com/?q=\",\n          title: \"Hacker News\"\n        },\n        {\n          type: portaType.search,\n          url: \"https://www.amazon.com/s?k=\",\n          title: \"Amazon\"\n        },\n        {\n          type: portaType.search,\n          url: \"https://duckduckgo.com/?q=\",\n          title: \"DuckDuckGo\"\n        },\n        {\n          type: portaType.search,\n          url: \"https://duckduckgo.com/?q=\",\n          prefix: \"Elite Dangerous\",\n          title: \"DuckDuckGo\"\n        }\n      ]\n    }\n  };\n  \n  \n  handleUserLogIn = (event) => {\n    this.setState({\n      userLoggedIn: true\n    });\n  };\n  \n  handleUserLogOut = (event) => {\n    this.setState({\n      userLoggedIn: false\n    });\n  };\n  \n  handleUserSignUp = (event) => {\n    console.log('app > handle user sign up');\n  }\n  \n  \n  render() {\n    \n    return (\n      <div className=\"App\">\n        <Header \n          userLoggedIn={this.state.userLoggedIn} \n          logInHandler={this.handleUserLogIn} \n          logOutHandler={this.handleUserLogOut} \n          signUpHandler={this.handleUserSignUp}\n        />\n\n        <div className=\"container is-fluid\">\n          <PortaCards portas={this.state.portas} userLoggedIn={this.state.userLoggedIn} />\n        </div>\n\n      </div>\n\n    );\n    \n  }\n  \n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.sass';\nimport App from './App/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}